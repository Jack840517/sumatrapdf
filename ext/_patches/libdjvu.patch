diff -rPu5 libdjvu.orig\ddjvuapi.cpp libdjvu\ddjvuapi.cpp
--- libdjvu.orig\ddjvuapi.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\ddjvuapi.cpp	Mon Aug 11 14:45:43 2014
@@ -1051,10 +1051,49 @@
                                        int cache)
 {
   return ddjvu_document_create_by_filename_imp(ctx,filename,cache,1);
 }
 
+/* SumatraPDF: ddjvu_document_create_by_data */
+ddjvu_document_t *
+ddjvu_document_create_by_data(ddjvu_context_t *ctx,
+                              const char *data,
+                              unsigned long datalen)
+{
+  ddjvu_document_t *d = 0;
+  G_TRY
+    {
+      d = new ddjvu_document_s;
+      ref(d);
+      GMonitorLock lock(&d->monitor);
+      d->streams[0] = DataPool::create();
+      d->streamid = -1;
+      d->fileflag = false;
+      d->docinfoflag = false;
+      d->pageinfoflag = false;
+      d->myctx = ctx;
+      d->mydoc = 0;
+      d->doc = DjVuDocument::create_noinit();
+      ddjvu_stream_write(d, 0, data, datalen);
+      ddjvu_stream_close(d, 0, 0);
+      GUTF8String s;
+      s.format("ddjvu:///doc%d/index.djvu", ++(ctx->uniqueid));;
+      GURL gurl = s;
+      d->urlflag = false;
+      d->doc->start_init(gurl, d, 0);
+    }
+  G_CATCH(ex)
+    {
+      if (d) 
+        unref(d);
+      d = 0;
+      ERROR1(ctx, ex);
+    }
+  G_ENDCATCH;
+  return d;
+}
+
 ddjvu_job_t *
 ddjvu_document_job(ddjvu_document_t *document)
 {
   return document;
 }
@@ -3841,10 +3880,12 @@
             {
               if (file->get_flags() & DjVuFile::STOPPED)
                 return miniexp_status(DDJVU_JOB_STOPPED);
               return miniexp_status(DDJVU_JOB_FAILED);
             }
+          /* SumatraPDF: TODO: how to prevent a potentially infinite loop? */
+          return miniexp_status(DDJVU_JOB_FAILED);
         }
       return miniexp_dummy;
     }
   // Access annotation data
   return get_bytestream_anno(file->get_merged_anno());
@@ -4090,5 +4131,10 @@
 {
   return document->doc;
 }
 
 
+/* SumatraPDF: access to free() mirroring malloc() above */
+void ddjvu_free(void *ptr)
+{
+  free(ptr);
+}
diff -rPu5 libdjvu.orig\ddjvuapi.h libdjvu\ddjvuapi.h
--- libdjvu.orig\ddjvuapi.h	Tue May 08 04:56:53 2012
+++ libdjvu\ddjvuapi.h	Mon Aug 11 14:49:17 2014
@@ -528,10 +528,22 @@
 DDJVUAPI ddjvu_document_t *
 ddjvu_document_create_by_filename_utf8(ddjvu_context_t *context,
                                        const char *filename,
                                        int cache);
 
+
+/* SumatraPDF: ddvu_document_create_by_data ---
+   Creates a document from in-memory data
+   (needed as an alternative to ddjvu_document_create when
+   compiling libdjvu without thread support) */
+
+DDJVUAPI ddjvu_document_t *
+ddjvu_document_create_by_data(ddjvu_context_t *context,
+                              const char *data,
+                              unsigned long datalen);
+
+
 /* ddjvu_document_job ---
    Access the job object in charge of decoding the document header. 
    In fact <ddjvu_document_t> is a subclass of <ddjvu_job_t>
    and this function is a type cast. */
 
@@ -1673,7 +1685,10 @@
 DDJVUAPI GP<DjVuDocument>
 ddjvu_get_DjVuDocument(ddjvu_document_t *document);
 #  endif
 # endif
 #endif
+
+/* SumatraPDF: implementation of <free> mentioned above */
+void ddjvu_free(void *ptr);
 
 #endif /* DDJVUAPI_H */
diff -rPu5 libdjvu.orig\djvu_all.cpp libdjvu\djvu_all.cpp
--- libdjvu.orig\djvu_all.cpp	Thu Jan 01 01:00:00 1970
+++ libdjvu\djvu_all.cpp	Tue May 14 21:21:21 2013
@@ -0,0 +1,44 @@
+#include "Arrays.cpp"
+#include "atomic.cpp"
+#include "BSByteStream.cpp"
+#include "BSEncodeByteStream.cpp"
+#include "ByteStream.cpp"
+#include "DataPool.cpp"
+#include "DjVmDir0.cpp"
+#include "DjVmDoc.cpp"
+#include "DjVmNav.cpp"
+#include "DjVuAnno.cpp"
+#include "DjVuDumpHelper.cpp"
+#include "DjVuErrorList.cpp"
+#include "DjVuFile.cpp"
+#include "DjVuFileCache.cpp"
+#include "DjVuGlobal.cpp"
+#include "DjVuGlobalMemory.cpp"
+#include "DjVuImage.cpp"
+#include "DjVuInfo.cpp"
+#include "DjVuMessage.cpp"
+#include "DjVuNavDir.cpp"
+#include "DjVuPalette.cpp"
+#include "DjVuPort.cpp"
+#include "DjVuText.cpp"
+#include "GBitmap.cpp"
+#include "GContainer.cpp"
+#include "GException.cpp"
+#include "GIFFManager.cpp"
+#include "GOS.cpp"
+#include "GRect.cpp"
+#include "GSmartPointer.cpp"
+#include "GString.cpp"
+#include "GThreads.cpp"
+#include "GUnicode.cpp"
+#include "IFFByteStream.cpp"
+#include "JB2EncodeCodec.cpp"
+#include "DjVmDir.cpp"
+#include "MMRDecoder.cpp"
+#include "MMX.cpp"
+#include "UnicodeByteStream.cpp"
+#include "XMLTags.cpp"
+#include "ZPCodec.cpp"
+#include "ddjvuapi.cpp"
+#include "debug.cpp"
+
diff -rPu5 libdjvu.orig\DjVuGlobal.h libdjvu\DjVuGlobal.h
--- libdjvu.orig\DjVuGlobal.h	Tue May 08 04:56:53 2012
+++ libdjvu\DjVuGlobal.h	Thu Dec 27 14:30:53 2012
@@ -70,11 +70,12 @@
 # include <new>
 #else
 # include <new.h>
 #endif
 
-#ifdef WIN32
+// SumatraPDF: allow to build as a static library (built-in)
+#ifdef WIN32_AND_NOT_STATIC
 # ifdef DLL_EXPORT
 #  define DJVUAPI __declspec(dllexport)
 # else
 #  define DJVUAPI __declspec(dllimport)
 # endif
diff -rPu5 libdjvu.orig\DjVuMessage.cpp libdjvu\DjVuMessage.cpp
--- libdjvu.orig\DjVuMessage.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\DjVuMessage.cpp	Mon Aug 12 21:07:40 2013
@@ -498,10 +498,11 @@
 static GUTF8String
 parse(GMap<GUTF8String,GP<lt_XMLTags> > &retval)
 {
   GUTF8String errors;
   GPList<lt_XMLTags> body;
+  if (0) /* SumatraPDF: don't bother looking for messages.xml and languages.xml using broken code */
   {
     GList<GURL> paths=DjVuMessage::GetProfilePaths();
     GMap<GUTF8String, void *> map;
     GUTF8String m(MessageFile);
     errors=getbodies(paths,m,body,map);
diff -rPu5 libdjvu.orig\DjVuPalette.cpp libdjvu\DjVuPalette.cpp
--- libdjvu.orig\DjVuPalette.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\DjVuPalette.cpp	Fri Oct 25 13:39:08 2013
@@ -96,13 +96,16 @@
 
 inline unsigned char 
 umin(unsigned char a, unsigned char b) 
 { return (a>b) ? b : a; }
 
+/* SumatraPDF: in VS 2013 math.h already defines fmin */
+#if !defined(_MSC_VER) || (_MSC_VER < 1800)
 inline float 
 fmin(float a, float b) 
 { return (a>b) ? b : a; }
+#endif
 
 
 
 // ------- DJVUPALETTE
 
diff -rPu5 libdjvu.orig\GException.cpp libdjvu\GException.cpp
--- libdjvu.orig\GException.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\GException.cpp	Tue May 14 21:21:21 2013
@@ -251,10 +251,12 @@
 
 
 
 // ------ MEMORY MANAGEMENT HANDLER
 
+/* SumatraPDF: prevent exception handler overriding when not building stand-alone libdjvu */
+#ifdef ALLOW_GLOBAL_OOM_HANDLING
 #ifndef NEED_DJVU_MEMORY
 // This is not activated when C++ memory management
 // is overidden.  The overriding functions handle
 // memory exceptions by themselves.
 # if defined(_MSC_VER)
@@ -271,10 +273,11 @@
 static void (*old_handler)() = set_new_handler(throw_memory_error);
 #   endif // HAVE_STDINCLUDES
 #  endif // ! WIN32
 # endif // !_MSC_VER
 #endif // !NEED_DJVU_MEMORY
+#endif
 
 
 #ifdef HAVE_NAMESPACES
 }
 # ifndef NOT_USING_DJVU_NAMESPACE
diff -rPu5 libdjvu.orig\GException.h libdjvu\GException.h
--- libdjvu.orig\GException.h	Tue May 08 04:56:53 2012
+++ libdjvu\GException.h	Tue May 14 21:21:21 2013
@@ -310,12 +310,13 @@
 #ifdef __GNUG__
 #define G_THROW_TYPE(msg,xtype) GExceptionHandler::emthrow \
   (GException(msg, __FILE__, __LINE__, __PRETTY_FUNCTION__, xtype)) 
 #define G_EMTHROW(ex) GExceptionHandler::emthrow(ex)
 #else
+// SumatraPDF: don't collect messages, file and line for smaller size
 #define G_THROW_TYPE(m,xtype) GExceptionHandler::emthrow \
-  (GException(m, __FILE__, __LINE__,0, xtype))
+  (GException(0, 0, 0, 0, xtype))
 #define G_EMTHROW(ex) GExceptionHandler::emthrow(ex)
 #endif
 
 #endif // !CPP_SUPPORTS_EXCEPTIONS
 
diff -rPu5 libdjvu.orig\GThreads.h libdjvu\GThreads.h
--- libdjvu.orig\GThreads.h	Tue May 08 04:56:53 2012
+++ libdjvu\GThreads.h	Sat Aug 18 20:17:23 2012
@@ -105,10 +105,13 @@
 #include "GException.h"
 
 #define NOTHREADS     0
 #define POSIXTHREADS  10
 #define WINTHREADS    11
+/* SumatraPDF: prevent these constants from being confused with NOTHREADS */
+#define MACTHREADS    -1
+#define COTHREADS     -1
 
 // Known platforms
 #ifndef THREADMODEL
 #if defined(WIN32)
 #define THREADMODEL WINTHREADS
diff -rPu5 libdjvu.orig\GURL.cpp libdjvu\GURL.cpp
--- libdjvu.orig\GURL.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\GURL.cpp	Sun Dec 16 16:00:23 2012
@@ -482,11 +482,11 @@
 GURL::protocol(const GUTF8String& url)
 {
   const char * const url_ptr=url;
   const char * ptr=url_ptr;
   for(char c=*ptr;
-      c && (isalnum(c) || c == '+' || c == '-' || c == '.');
+      c && (isalnum((unsigned char)c) || c == '+' || c == '-' || c == '.');
       c=*(++ptr)) EMPTY_LOOP;
   if (ptr[0]==colon && ptr[1]=='/' && ptr[2]=='/')
     return GUTF8String(url_ptr, ptr-url_ptr);
   return GUTF8String();
 }
diff -rPu5 libdjvu.orig\IW44Image.cpp libdjvu\IW44Image.cpp
--- libdjvu.orig\IW44Image.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\IW44Image.cpp	Sat Jul 26 23:31:55 2014
@@ -682,10 +682,13 @@
 void 
 IW44Image::Map::image(signed char *img8, int rowsize, int pixsep, int fast)
 {
   // Allocate reconstruction buffer
   short *data16;
+  // cf. http://sourceforge.net/p/djvu/djvulibre-git/ci/7993b445f071a15248bd4be788a10643213cb9d2/
+  if (INT_MAX / bw < bh)
+    G_THROW("IW44Image: image size exceeds maximum (corrupted file?)");
   GPBuffer<short> gdata16(data16,bw*bh);
   // Copy coefficients
   int i;
   short *p = data16;
   const IW44Image::Block *block = blocks;
diff -rPu5 libdjvu.orig\miniexp.cpp libdjvu\miniexp.cpp
--- libdjvu.orig\miniexp.cpp	Tue May 08 04:56:53 2012
+++ libdjvu\miniexp.cpp	Tue May 14 21:21:21 2013
@@ -899,11 +899,12 @@
 }
 
 int 
 miniexp_stringp(miniexp_t p)
 {
-  return miniexp_isa(p, ministring_t::classname) ? 1 : 0;
+  // SumatraPDF: don't execute code until asked to
+  return miniexp_isa(p, miniexp_symbol("string")) ? 1 : 0;
 }
 
 const char *
 miniexp_to_str(miniexp_t p)
 {
@@ -1333,10 +1334,13 @@
 }
 
 
 /* ---- PNAME */
 
+// SumatraPDF: don't compile as it's not used and it's the only place
+// using try/catch, which is not compatible with compiling as /EHs-c-
+#if 0
 static int
 pname_fputs(miniexp_io_t *io, const char *s)
 {
   char *b = (char*)(io->data[0]);
   size_t l = (size_t)(io->data[2]);
@@ -1380,10 +1384,11 @@
     {
       delete [] (char*)(io.data[0]);
     }
   return r;
 }
+#endif
 
 
 /* ---- INPUT */
 
 static void
diff -rPu5 libdjvu.orig\miniexp.h libdjvu\miniexp.h
--- libdjvu.orig\miniexp.h	Tue May 08 04:56:53 2012
+++ libdjvu\miniexp.h	Sat Aug 18 20:14:08 2012
@@ -679,15 +679,16 @@
   public: static const miniexp_t classname; \
           virtual miniexp_t classof() const; \
           virtual bool isa(miniexp_t) const; 
 
 #define MINIOBJ_IMPLEMENT(cls, supercls, name)\
-  const miniexp_t cls::classname = miniexp_symbol(name);\
+  /* SumatraPDF: don't execute code until asked to */\
+  const miniexp_t cls::classname = 0;\
   miniexp_t cls::classof() const {\
-    return cls::classname; }\
+    return miniexp_symbol(name); }\
   bool cls::isa(miniexp_t n) const {\
-    return (cls::classname==n) || (supercls::isa(n)); }
+    return (classof()==n) || (supercls::isa(n)); }
 
 
 /* miniexp_to_obj --
    Returns a pointer to the object represented by an lisp
    expression. Returns NULL if the expression is not an
